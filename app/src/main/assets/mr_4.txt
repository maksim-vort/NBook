Boolean — это тип переменных. В прошлом уроке мы говорили про числовые переменные, а в этом расскажем про логические. Логические переменные могут иметь всего два значения — ложь и истина:
<~code>var pravda=true;
var ne_pravda=false;</code>
При этом их значения тоже можно менять:
<~code>var bo=false;
bo=true</code> 
Значение логической переменной также можно инвентировать (менять наоборот):
<~code>var bool=false;
var inv_bool=!bool;//inv_bool противоположна bool  и поэтому равна true</code>
Вообще, восклицательный знак ! означает "логическое НЕ", то есть к переменной как-бы прибавляется НЕ: НЕ правда — ложь, НЕ ложь — правда.


Условия позволяют выполнять какие-либо действия строго при определенных обстоятельствах.
<~code>if(условие верно, то есть если в скобках истина)
{
//Выполнить действия...
}else{//Иначе, если в скобках была ложь
//Выполнить другие действия...
}</code>
else писать необязательно, потому что он не всегда нужен:
<~code>if(условие...)
{
//действие...
}</code>
<~code>var a=12;
if(a==12)//Проверяем, является ли переменная a числом 12
{
a=11;//Поскольку a=12, то данное действие выполнится и значение a установится на 11
}</code>
Можно написать по-другому:
<~code> 
var a=12;//Создание переменной, которая подвергнется проверке
var condition=a==12;//Создание логической переменной
if(condition)
{
a=11;
}</code>
Мы создали логическую переменную, которой присвоили значение сравнения переменной a со числом 12. Значение переменной будет равно true. if проверяет логическое значение выражения в скобках, и если оно true, то выполняет действие, в противном случае выполняется код в else, если он есть. Можно создать условие, которое будет выполнятся всегда:
<~code>if(true)
{
//Действия данного условия будут выполнятся всегда.
}</code>
Аналогично с ложью:
<~code>if(false)
{
//А эти действия никогда не будут выполнены
}</code>
Можно проверить, НЕ равна ли переменная числу:
<~code>var a=25;
if(a!=13)//Если a не равна 13
{
//Выполнить действия
}</code>
Но не всегда надо проверить лишь одно условие. Их может быть несколько. Такую проблему можно решить двумя способами:
<~code>//Способ 1
if(условие1&&условие2)
{
//Действия
}
//Можно добавить else, если это необходимо
</code>
<~code>Способ 2 
if(условие1)
{
if(условие2)
{
//Действия
}
}</code>
Рассмотрим плюсы и минусы каждого способа:
Первый способ хорош тем, что он короткий. && значит "логическое И", то есть если условие1 И условие2 верно, то действия будут выполнены. Можно добавить больше условий:
<~code>if(условие1&&условие2&&условие3&&условие4&&...&&условиеN)
{
//Действия
}</code>
<~code>var a=3;
var b=12;
if(a==3&&b==12)
{
//Действия
}</code>
Второй способ отлично подойдёт, если нужно проверить условие1 и ещё несколько условий:
<~code>var a=32;
var b=2;
if(a==32)
{
if(b==2)
{
//Действие 1
}
if(b==3)
{
//Действие 2
}
}</code>
Условие с "логическим И" можно записать в переменную:
<~code>var a=12;
var b=12;
var logic_and=a==12&&b==12;
if(logic_and)
{
a=13;
}</code>
Помимо "логического И" в JavaScript существует ещё и "логическое ИЛИ". Если одно из условий или они оба истинны, то код будет выполнен.
<~code>if(условие1||условие2)
{
//Действия
}</code>
<~code>var n1=16;
var n2=85;
if(n1==12||n2==85)
{
//Хоть и n1 не равна 12, данные действия будут выполнены, поскольку n2=85
n1=12;
n2=12;
}</code>
Условие с "ИЛИ" также можно записать в переменную:
<~code>var or1=12;
var or2=16;
var or_demo=or1==12||or2==16;
if(or_demo)
{
//Действия
}</code>
Но сравнивать можно не только числа, но и другие типы переменных. Например, boolean:
<~code>var bool_or=true;
var number=12;
if(bool_or&&number==12)
{

}</code>
В условии все выражения истинны (то есть равны true), поэтому код внутри будет выполнен.
