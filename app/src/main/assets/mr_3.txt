Массивы в JS позволяют хранить в себе неограниченное количество данных любого типа. Можно наполнить массив строками, числами, даже можно создать массив массивов.
Каждый элемент в массиве имеет свой порядковый номер — индекс. Индексирование начинается в массиве с нуля. То есть если у нас есть массив с числами 1, 2, 3, то число 1 будет иметь индекс 0, двойка — 1 и т.д.
От теории перейдём к практике. Создадим пустой массив:
<~code>var massiv=[];</code>
Уже при создании массива можно указать его содержимое, если оно нам известно:
<~code>var massiv=[1,2,3,4,5];</code>
Если нам нужно получить какое-то значение из массива, то нужно знать индекс этого содержимого:
<~code>var value=massiv[2];//value будет равно 3-ём</code>
Также содержимое мы можем установить после создания массива:
<~code>var massiv=[1,2,526,4,5];
massiv[2]=3;//Устанавливаем значение 3 для элемента с индексом 2 (526)</code>
Для работы с массивом в JS существуют специальные методы. Метод — команда устройству произвести операцию над каким-то объектом, в данном случае массивом.
Например:
<~code>var mass=[1,2,3,4];
mass.push(5);//Это и есть метод, а то, что в скобках — аргумент(ы)</code>
Метод push добавляет в конец массива элемент из скобок. То есть при создании массив содержал в себе числа 1, 2, 3 и 4, а после применения метода массив получил 5-ку на конце (1, 2, 3, 4, 5). Но push — далеко не единственный метод для работы с массивами 
Существуют также методы pop, shift, unshift, splice...
pop — противоположность push:
<~code>mass.pop();</code>
После этого из массива удалиться последний элемент (5). Этот элемент, кстати можно получить в переменную:
<~code>var mass=[1,2,3,4,5];
var popped_element=mass.pop();//popped_element=5</code>
Рассмотрим ещё пару методов
<~code>mass.shift();</code>
shift подобен pop, но удаляет первый элемент массива и делает второй элемент первым, третий вторым и т.д.
Как и в случае с pop, удаленный элемент можно записать:
<~code>var mass=[1,2,3,4,5];
var shifted_element=mass.shift();//shifted_element=1</code>
unshift добавляет элемент из скобок в начало массива:
<~code>var numbers=[2,3,4,5];
numbers.unshift(1); //теперь массив выглядит так: [1,2,3,4,5]</code>
Рассмотрим метод получения индекса элемента массива:
<~code>var massiv=[25,90,41,9];//Создание массива, наполненого 4-мя числами
var index=massiv.indexOf(90);//index будет равен 1, т.к. число 90 стоит на втором месте, а подсчёт индекса начинается с 0</code>
Но, вдруг элемента нет в массиве? Этот случай предусмотрен — index (или любая другая переменная, в которую получают индекс элемента) будет равен -1. Блок условия будет рассмотрен в одном из следующих уроков.
Есть еще один полезный метод для вырезки ненужного в массиве — splice.
splice "вырезает" содержимое массива, начиная с указаного индекса с указаной длинной "вырезки". 
<~code>var splice_massiv=[1,1,1,1,2,2,2,2,1,1,1];
splice_massiv.splice(4,4);//splice_massiv=[1,1,1,1,1,1,1];</code>

