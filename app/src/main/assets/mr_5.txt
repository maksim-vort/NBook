Функции — это маленькие подпрограммы в моде. Они используются для сокращения кода и просто для удобства. В ModPE некоторые функции вызываются при каком-либо событии в игре. Но пока что мы рассмотрим объявление новых функций. 
<~code>function myFunction()
{
//Действия
}</code>
Данным кодом будет создана ничего не делающая функция myFunction() (правила написания названия функций такие же как у переменных). Можно создать функцию другим образом:
<~code>var myFunction=function()
{
//Действия
}</code>
Для вызова нашей функции используем её имя и скобки:
<~code>myFunction();</code>
У функции могут быть аргументы — значения в скобках. Мы с ними встречались, когда изучали массивы:
<~code>var mass=[1,1,1,1,2,2,2,2,1,1,1];
mass.splice(4,4);//4,4 — аргументы функции splice</code>
Аргументы — это данные, которые передаются в функцию из внешнего кода. Рассмотрим пример функции, которая будет умножать одно число на другое:
<~code>function multiple(m1,m2)//Задаём названия аргументов, теперь их можно использовать как переменные
{
var result=m1*m2;//result будет равен произведению чисел, которые указаны в скобках при вызове функции
}</code>
Если вызвать новую функцию multiple с аргументами 5 и 10, вот так:
<~code>multiple(5,10);</code> 
То result будет равен 50.
Как вы заметили, внутри функций можно заводить переменные. Но созданными внутри переменными за пределами функций пользоваться нельзя.
<~code>function varDemo()
{
var d=25;//d можно использовать только в функции
}</code>
Но в функции можно использовать переменные, которые были созданы за их пределами:
<~code>var non_function=0;
function plusOne()
{
non_function++;//Функция plusOne() прибавляет в переменной non_function еденицу
}</code>
Функции могут возвращать вычисленное  значение. Модифицируем функцию для умножения чисел:
<~code>function multiple(n1,n2)
{
var result=n1*n2;
return result;
}</code>
Теперь мы можем использовать функцию:
<~code>var a=multiple(3,10);//a=3*10=30</code>
Когда функция возвращает какое-либо значение, она завершает свою работу. Писать какой-либо код после return бессмысленно.
<~code>var a=1;
function returnDemo()//Создадим простую функцию, которая возвращает еденицу
{
return 1;
a=2;//Попытаемся присвоить переменной a значение 2 после return
}
returnDemo();//После выполнения функции a все равно будет равна 1</code>
Функции позволяют сократить и упростить код. Записывая большой частоиспользуемый код в функцию, вы оптимизируете весь мод и экономите время.